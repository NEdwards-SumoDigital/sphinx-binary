diff -urN dist.orig/sphinxcontrib/plantuml.py dist/sphinxcontrib/plantuml.py
--- dist.orig/sphinxcontrib/plantuml.py	2019-04-12 08:20:15.000000000 +0900
+++ dist/sphinxcontrib/plantuml.py	2019-04-28 11:15:08.938191235 +0900
@@ -210,7 +210,8 @@
                                                         fileformat),
                                  stdout=f, stdin=subprocess.PIPE,
                                  stderr=subprocess.PIPE,
-                                 cwd=absincdir)
+                                 cwd=absincdir,
+                                 env=_new_env())
         except OSError as err:
             if err.errno != ENOENT:
                 raise
@@ -234,7 +235,8 @@
                              stdin=subprocess.PIPE,
                              stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE,
-                             cwd=absincdir)
+                             cwd=absincdir,
+                             env=_new_env())
     except OSError as err:
         if err.errno != ENOENT:
             raise
@@ -393,13 +395,15 @@
     try:
         try:
             p = subprocess.Popen(args, stdout=subprocess.PIPE,
-                                 stderr=subprocess.PIPE)
+                                 stderr=subprocess.PIPE,
+                                 env=_new_env())
         except OSError as err:
             # workaround for missing shebang of epstopdf script
             if err.errno != getattr(errno, 'ENOEXEC', 0):
                 raise
             p = subprocess.Popen(['bash'] + args, stdout=subprocess.PIPE,
-                                 stderr=subprocess.PIPE)
+                                 stderr=subprocess.PIPE,
+                                 env=_new_env())
     except OSError as err:
         if err.errno != ENOENT:
             raise
@@ -513,6 +517,17 @@
 }
 
 
+def _new_env():
+    env = dict(os.environ)  # make a copy of the environment
+    lp_key = 'LD_LIBRARY_PATH'  # for Linux and *BSD.
+    lp_orig = env.get(lp_key + '_ORIG')  # pyinstaller >= 20160820 has this
+    if lp_orig is not None:
+        env[lp_key] = lp_orig  # restore the original, unmodified value
+    else:
+        env.pop(lp_key, None)  # last resort: remove the env var
+    return env
+
+
 def setup(app):
     app.add_node(plantuml, **_NODE_VISITORS)
     app.add_directive('uml', UmlDirective)
