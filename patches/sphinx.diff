diff -urN dist.orig/sphinx/cmd/make_mode.py dist/sphinx/cmd/make_mode.py
--- dist.orig/sphinx/cmd/make_mode.py	2019-04-08 11:25:09.000000000 +0900
+++ dist/sphinx/cmd/make_mode.py	2019-04-28 10:57:34.455970210 +0900
@@ -104,7 +104,7 @@
             makecmd = self.makecmd
         try:
             with cd(self.builddir_join('latex')):
-                return subprocess.call([makecmd, 'all-pdf'])
+                return subprocess.run([makecmd, 'all-pdf'], env=_new_env())
         except OSError:
             print('Error: Failed to run: %s' % makecmd)
             return 1
@@ -120,7 +120,7 @@
             makecmd = self.makecmd
         try:
             with cd(self.builddir_join('latex')):
-                return subprocess.call([makecmd, 'all-pdf'])
+                return subprocess.run([makecmd, 'all-pdf'], env=_new_env())
         except OSError:
             print('Error: Failed to run: %s' % makecmd)
             return 1
@@ -131,7 +131,7 @@
             return 1
         try:
             with cd(self.builddir_join('texinfo')):
-                return subprocess.call([self.makecmd, 'info'])
+                return subprocess.run([self.makecmd, 'info'], env=_new_env())
         except OSError:
             print('Error: Failed to run: %s' % self.makecmd)
             return 1
@@ -171,3 +171,14 @@
     if hasattr(make, run_method):
         return getattr(make, run_method)()
     return make.run_generic_build(args[0])
+
+
+def _new_env():
+    env = dict(os.environ)  # make a copy of the environment
+    lp_key = 'LD_LIBRARY_PATH'  # for Linux and *BSD.
+    lp_orig = env.get(lp_key + '_ORIG')  # pyinstaller >= 20160820 has this
+    if lp_orig is not None:
+        env[lp_key] = lp_orig  # restore the original, unmodified value
+    else:
+        env.pop(lp_key, None)  # last resort: remove the env var
+    return env
diff -urN dist.orig/sphinx/ext/graphviz.py dist/sphinx/ext/graphviz.py
--- dist.orig/sphinx/ext/graphviz.py	2019-04-08 11:25:09.000000000 +0900
+++ dist/sphinx/ext/graphviz.py	2019-04-28 10:46:16.708261877 +0900
@@ -9,6 +9,7 @@
     :license: BSD, see LICENSE for details.
 """
 
+import os
 import posixpath
 import re
 import subprocess
@@ -245,7 +246,7 @@
 
     try:
         ret = subprocess.run(dot_args, input=code.encode(), stdout=PIPE, stderr=PIPE,
-                             cwd=cwd, check=True)
+                             cwd=cwd, env=_new_env(), check=True)
         if not path.isfile(outfn):
             raise GraphvizError(__('dot did not produce an output file:\n[stderr]\n%r\n'
                                    '[stdout]\n%r') % (ret.stderr, ret.stdout))
@@ -402,6 +403,17 @@
         copy_asset(src, dst)
 
 
+def _new_env():
+    env = dict(os.environ)  # make a copy of the environment
+    lp_key = 'LD_LIBRARY_PATH'  # for Linux and *BSD.
+    lp_orig = env.get(lp_key + '_ORIG')  # pyinstaller >= 20160820 has this
+    if lp_orig is not None:
+        env[lp_key] = lp_orig  # restore the original, unmodified value
+    else:
+        env.pop(lp_key, None)  # last resort: remove the env var
+    return env
+
+
 def setup(app):
     # type: (Sphinx) -> Dict[str, Any]
     app.add_node(graphviz,
diff -urN dist.orig/sphinx/ext/imgconverter.py dist/sphinx/ext/imgconverter.py
--- dist.orig/sphinx/ext/imgconverter.py	2019-04-08 11:25:09.000000000 +0900
+++ dist/sphinx/ext/imgconverter.py	2019-04-28 10:48:46.344087660 +0900
@@ -7,6 +7,7 @@
     :copyright: Copyright 2007-2019 by the Sphinx team, see AUTHORS.
     :license: BSD, see LICENSE for details.
 """
+import os
 import subprocess
 from subprocess import CalledProcessError, PIPE
 
@@ -37,7 +38,7 @@
         try:
             args = [self.config.image_converter, '-version']
             logger.debug('Invoking %r ...', args)
-            subprocess.run(args, stdout=PIPE, stderr=PIPE, check=True)
+            subprocess.run(args, stdout=PIPE, stderr=PIPE, env=_new_env(), check=True)
             return True
         except OSError:
             logger.warning(__('convert command %r cannot be run.'
@@ -62,7 +63,7 @@
                     self.config.image_converter_args +
                     [_from, _to])
             logger.debug('Invoking %r ...', args)
-            subprocess.run(args, stdout=PIPE, stderr=PIPE, check=True)
+            subprocess.run(args, stdout=PIPE, stderr=PIPE, env=_new_env(), check=True)
             return True
         except OSError:
             logger.warning(__('convert command %r cannot be run.'
@@ -75,6 +76,17 @@
                                  (exc.stderr, exc.stdout))
 
 
+def _new_env():
+    env = dict(os.environ)  # make a copy of the environment
+    lp_key = 'LD_LIBRARY_PATH'  # for Linux and *BSD.
+    lp_orig = env.get(lp_key + '_ORIG')  # pyinstaller >= 20160820 has this
+    if lp_orig is not None:
+        env[lp_key] = lp_orig  # restore the original, unmodified value
+    else:
+        env.pop(lp_key, None)  # last resort: remove the env var
+    return env
+
+
 def setup(app):
     # type: (Sphinx) -> Dict[str, Any]
     app.add_post_transform(ImagemagickConverter)
diff -urN dist.orig/sphinx/ext/imgmath.py dist/sphinx/ext/imgmath.py
--- dist.orig/sphinx/ext/imgmath.py	2019-04-08 11:25:09.000000000 +0900
+++ dist/sphinx/ext/imgmath.py	2019-04-28 10:50:00.805987096 +0900
@@ -9,6 +9,7 @@
 """
 
 import posixpath
+import os
 import re
 import shutil
 import subprocess
@@ -133,7 +134,7 @@
     command.append('math.tex')
 
     try:
-        subprocess.run(command, stdout=PIPE, stderr=PIPE, cwd=tempdir, check=True)
+        subprocess.run(command, stdout=PIPE, stderr=PIPE, cwd=tempdir, env=_new_env(), check=True)
         return path.join(tempdir, 'math.dvi')
     except OSError:
         logger.warning(__('LaTeX command %r cannot be run (needed for math '
@@ -148,7 +149,7 @@
     # type: (List[str], str) -> Tuple[bytes, bytes]
     """Convert DVI file to specific image format."""
     try:
-        ret = subprocess.run(command, stdout=PIPE, stderr=PIPE, check=True)
+        ret = subprocess.run(command, stdout=PIPE, stderr=PIPE, env=_new_env(), check=True)
         return ret.stdout, ret.stderr
     except OSError:
         logger.warning(__('%s command %r cannot be run (needed for math '
@@ -332,6 +333,17 @@
     raise nodes.SkipNode
 
 
+def _new_env():
+    env = dict(os.environ)  # make a copy of the environment
+    lp_key = 'LD_LIBRARY_PATH'  # for Linux and *BSD.
+    lp_orig = env.get(lp_key + '_ORIG')  # pyinstaller >= 20160820 has this
+    if lp_orig is not None:
+        env[lp_key] = lp_orig  # restore the original, unmodified value
+    else:
+        env.pop(lp_key, None)  # last resort: remove the env var
+    return env
+
+
 def setup(app):
     # type: (Sphinx) -> Dict[str, Any]
     app.add_html_math_renderer('imgmath',
